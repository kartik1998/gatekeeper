#!/usr/bin/env node

const http = require('http');
const app = require('../index');

function normalizePort(val) {
  const listenPort = parseInt(val, 10);

  if (Number.isNaN(listenPort)) {
    // named pipe
    return val;
  }

  if (listenPort >= 0) {
    // port number
    return listenPort;
  }
  return false;
}
/*
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `'pipe ${addr}`
    : `'port ${addr.port}`;
  console.log(`Listening on ${bind}`); // debug here
}

function shutDown() {
  console.error('Shutdown due to kill signal');
  server.close(() => {
    console.log('Server Closed');
    process.exit(0);
  });
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */
process.on('SIGTERM', shutDown);
process.on('SIGINT', shutDown);

